#!/usr/bin/env python

import sys, os, traceback
import logging
from fidget import Fidget

def addopt(options, option, argv):
    if option in ('v', 'verbose'):
        options['logging']['fidget'] -= 10
    elif option in ('q', 'quiet'):
        options['logging']['fidget'] += 10
    elif option in ('h', 'help'):
        usage(options["logging"]["fidget"] < 20)
        sys.exit(0)
    elif option in ('safe',):
        options['safe'] = True
    elif option in ('o', 'output'):
        options['outfiles'].append(next(argv))
    elif option in ('w',):
        options['whitelist'].append(next(argv))
    elif option in ('b',):
        options['blacklist'].append(next(argv))
    elif option in ('debug',):
        options['debug'] = True
    elif option in ('debugangr',):
        options['debugangr'] = True
    elif option in ('l', 'log'):
        tag = next(argv)
        lvl = next(argv)
        if lvl.isdigit():
            lvl = int(lvl)
        options['logging'][tag] = lvl
    elif option in ('e', 'exit-on-error'):
        options['exit'] = True
    elif option in ('logfile',):
        options['logfile'] = next(argv)
    else:
        print 'Bad argument: %s' % option
        sys.exit(1)

def usage(verbose):
    print """Fidget: The Binary Tweaker

Usage: fidget [option | filename] [option | filename] ...

Options:
    -h, --help              View this usage information and exit
    -vh                     View additional usage information
    -v, --verbose           More output
    -q, --quiet             Less output
    -o, --output [file]     Output patched binary to file (default <input>.out)
    -w [function]           Whitelist a function name
    -b [function]           Blacklist a function name
    --safe                  Make conservative modifications
    --debug                 Pop an ipdb shell at the main function
    --debugangr             Pop an ipdb shell right before calling into angr
    -l, --log [tag] [level] Change logging levels
    --logfile [file]        Log output to a file
    -e, --exit-on-error     Exits at first error instead of trying more files"""

    if verbose:
        print """
Files:
    Each argument that is not part of an option is treated as an input file.
    There must be at least one input file, and if there are multiple inputs,
    they will be processed in the order given. If there are multiple outputs,
    there must not be more output files than inputs. If there are fewer 
    outputs than inputs, the <n> outputs will be matched up with the first <n> 
    inputs, and the rest of the inputs will be outputted as <input>.out.

Verbosity and Logging:
    The default verbosity level is INFO.
    Each verbose flag increases it, to DEBUG, while each quiet flag reduces it, to 
    WARNING, then ERROR, then CRITICAL.

    Level 0 prints out only the file and function names
    Level 1 prints out the above and a summary of each function and some warnings
    Level 2 prints out the above and some debug output
    Level 3 prints out the above and each IR instruction as it is parsed
    
    With the -l and --log flags, you can change the kind of output that is logged.
    Pass it a tag like "angr", "claripy", or "simuvex" and a logging level, and 
    the results of the logging module for these libraries will be outputted at the
    given verbosity level.

    Fidget's verbosity is also controlled through the logging module, but please 
    don't actually set it this way.

    The defaults are:
        --log fidget INFO
        --log angr WARNING
        --log simuvex WARNING
        --log cle WARNING
        --log claripy ERROR

Whitelisting/Blacklisting:
    There is no actual function name lookup, so all function names are of the
    form "sub_xxxx", where xxxx is the hexadecimal (lowercase) address of the
    function.

    The entry point will never be patched, so there is no need to blacklist it.

    You cannot use both a whitelist and a blacklist, obviously.

    Protip: instead of "-w sub_a -w sub_b -w sub_c" you can
    use "-www sub_a sub_b sub_c" for the same effect.

Safety:
    Fidget works by rearranging stack variables, which can get sketchy
    because even identifying where the variables on the stack are is a 
    difficult problem to begin with. The danger arises that fidget might 
    seperate, say, an access to my_arr[4] from the rest of my_arr because 
    it thinks it's a seperate variable.

    The --safe flag will counteract this by keeping all accesses in the 
    same place relative to eachother. It will still attempt to move them 
    all up relative to the stack base, preventing buffer overflows 
    messing with eip, but will be ineffective against overflows that merely 
    modify or leak other stack variables.
"""

class CanonColors:
    end = '\033[0m'
    time = '\033[30m'
    name = '\033[1m'

    c_critical = '\033[1;48m'
    c_error = '\033[1;31m'
    c_warning = '\033[1;33m'
    c_info = '\033[1;36m'
    c_debug = '\033[1;32m'

    n_critical = 'CRITICAL: '
    n_error = 'ERROR: '
    n_warning = 'WARNING: '
    n_info = 'INFO: '
    n_debug = 'DEBUG: '

    c_simuvex = '\033[1;34m'
    c_angr = '\033[1;31m'
    c_fidget = '\033[1;33m'
    c_cle = '\033[1;32m'
    c_claripy = '\033[1;32m'

    colored_names = {
        'simuvex': c_simuvex,
        'angr': c_angr,
        'fidget': c_fidget,
        'cle': c_cle,
        'claripy': c_claripy
    }

    @staticmethod
    def colored_level(level):
        n = ''
        c = CanonColors.end
        if level >= 50:
            n = CanonColors.n_critical
            c = CanonColors.c_critical
        elif level >= 40:
            n = CanonColors.n_error
            c = CanonColors.c_error
        elif level >= 30:
            n = CanonColors.n_warning
            c = CanonColors.c_warning
        elif level >= 20:
            n = CanonColors.n_info
            c = CanonColors.c_info
        elif level >= 10:
            n = CanonColors.n_debug
            c = CanonColors.c_debug

        n = n.rjust(10)
        return c + n + CanonColors.end

class PrettyFormatter(logging.Formatter):
    def format(self, record):
        out = ''
        out += CanonColors.time + '[' + self.formatTime(record, '%H:%M:%S') + '] ' + CanonColors.end
        c = CanonColors.name
        for name, color in CanonColors.colored_names.iteritems():
            if record.name.startswith(name):
                c = color
                break
        out += c + ('[' +  record.name + ']').ljust(25) + CanonColors.end + ' | '
        out += CanonColors.colored_level(record.levelno)
        out += record.getMessage()
        if record.exc_info:
            traceback.print_exception(*record.exc_info)
        return out

def main():
    if len(sys.argv) < 2:
        usage(False)
    else:
        options = {"logging": {"fidget": 20, "angr": 'WARNING', "simuvex": 'WARNING', "cle": 'WARNING', "claripy": 'ERROR'}, "logfile": None, "safe": False, "infiles": [], "outfiles": [], "whitelist": [], "blacklist": [], "debug": False, 'debugangr': False, "exit-on-error": False}
        argv = iter(sys.argv)
        next(argv)
        for arg in argv:
            if arg.startswith('--'):
                addopt(options, arg[2:], argv)
            elif arg.startswith('-'):
                for flag in arg[1:]: addopt(options, flag, argv)
            else:
                options["infiles"].append(arg)
        if len(options['whitelist']) > 0 and len(options['blacklist']) > 0:
            print 'Cannot use both a whitlist and a blacklist!'
            sys.exit(1)
        if len(options["infiles"]) == 0:
            print 'You must specify a file to operate on!'
            sys.exit(1)
        if len(options["outfiles"]) > len(options["infiles"]):
            print 'More output files specified than input files!'
            sys.exit(1)

        formatter = PrettyFormatter()
        logopt = options.pop('logging')
        logfile = options.pop('logfile')
        if logfile is None:
            handler = logging.StreamHandler()
        else:
            handler = logging.FileHandler(logfile)
        handler.setFormatter(formatter)

        for tag, lvl in logopt.iteritems():
            logger = logging.getLogger(tag)
            logger.setLevel(lvl)
            logger.addHandler(handler)

        exit_on_error = options.pop('exit-on-error')

        outfiles = options.pop('outfiles')
        infiles = options.pop('infiles')
        outfiles += [None] * (len(infiles) - len(outfiles))
        for infile, outfile in zip(infiles, outfiles):
            try:
                fidget = Fidget(infile, **options)
                fidget.patch()
                fidget.apply_patches(outfile)
            except:
                traceback.print_exc()
                if exit_on_error:
                    sys.exit(1)

if __name__ == '__main__':
    main()
